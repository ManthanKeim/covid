{"version":3,"sources":["Summary/index.js","Header.js","Footer.js","App.js","serviceWorker.js","api/index.js","index.js"],"names":["query","INDIA","gql","WORLD","Summary","props","stats","entity","extractStats","result","country","mostRecent","summary","useQuery","loading","error","data","shadow","style","height","minHeight","width","padding","className","size","appearance","display","justifyContent","name","value","confirmed","deaths","recovered","COLORS","RADIAN","Math","PI","onMouseEnter","dataKey","cx","cy","labelLine","label","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","map","entry","length","key","getChart","fontSize","Header","Footer","year","Date","getFullYear","weight","App","Boolean","window","location","hostname","match","client","ApolloClient","uri","console","log","process","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1a3c0582.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Spinner, Text, Heading } from 'design-system';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport {\n  PieChart, Pie, Sector, Cell, Tooltip\n} from 'recharts';\nimport './Summary.css';\n\nconst query = {\n  INDIA: gql`\n    {country(name: \\\"India\\\") { name, mostRecent { confirmed, deaths, recovered}}}\n  `,\n  WORLD: gql`\n    { summary{\n      confirmed,\n      deaths,\n      recovered } }\n  `\n};\n\nconst Summary = (props) => {\n  const { entity } = props;\n\n  const extractStats = (entity, result) => {\n    const stats = entity === 'INDIA' ? result.country.mostRecent : result.summary;\n    return stats;\n  }\n\n  const getChart = stats => {\n    const data = [\n      {\n        name: 'Active', value: stats.confirmed - stats.deaths - stats.recovered\n      },\n      {\n        name: 'Deaths', value: stats.deaths\n      },\n      {\n        name: 'Recovered', value: stats.recovered\n      }\n    ]\n    const COLORS = ['#0070dd', '#d93737', '#2ea843'];\n    const RADIAN = Math.PI / 180; \n    const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\n      const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n     const x  = cx + radius * Math.cos(-midAngle * RADIAN);\n     const y = cy  + radius * Math.sin(-midAngle * RADIAN);\n    \n     return (\n       <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} \tdominantBaseline=\"central\">\n         {`${(percent * 100).toFixed(0)}%`}\n       </text>\n     );\n   };\n   return (\n    <PieChart width={400} height={200} onMouseEnter={() => null}>\n        <Pie\n          data={data}\n          dataKey=\"value\"\n          cx={200} \n          cy={100} \n          labelLine={false}\n          label={renderCustomizedLabel}\n          outerRadius={80} \n          fill=\"#8884d8\"\n        >\n          {\n            data.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]} key={index} />)\n          }\n        </Pie>\n        <Tooltip />\n      </PieChart>\n   )\n  }\n\n  const getLegends = stats => {\n    return (\n      <ul className=\"Summary-list\">\n        <li className=\"Summary-list-item\" key=\"0\">\n          <div className=\"Legend Legend--primary\"></div>\n          <Text>Active - {stats.confirmed - stats.deaths - stats.recovered}</Text>\n        </li>\n        <li key=\"1\" className=\"Summary-list-item\">\n          <div className=\"Legend Legend--success\"></div>\n          <Text>Recovered - {stats.recovered}</Text>\n        </li>\n        <li key=\"2\" className=\"Summary-list-item\">\n          <div className=\"Legend Legend--alert\"></div>\n          <Text>Deaths - {stats.deaths}</Text>\n        </li>\n      </ul>\n    )\n  }\n\n\n  const { loading, error, data } = useQuery(query[entity]);\n  return (\n    <Card\n      shadow=\"medium\"\n      style={{\n        height: '100%',\n        minHeight: '200px',\n        width: '45%',\n        padding: '16px'\n      }}\n    >\n      <Text>{entity} STATISTICS</Text>\n        {loading && (\n          <div className=\"Spinner-container\">\n            <Spinner size=\"large\" appearance=\"primary\" />\n          </div>\n        )}\n        {!loading && error && (\n          <p>Error :(</p>\n        )}\n        {!loading && !error && (\n          <div style={{display: 'flex', justifyContent: 'flex-start'}}>\n            <div>\n              {getChart(extractStats(entity, data))}\n            </div>\n            <div>\n              <Heading appearance=\"subtle\" size=\"m\">\n                Total Patients\n              </Heading>\n              <Text appearance=\"destructive\" style={{fontSize: '40px'}}>\n                {extractStats(entity, data).confirmed}\n              </Text>\n              {getLegends(extractStats(entity, data))}\n            </div>\n          </div>\n        )}\n    </Card>\n    );\n}\n\nexport default Summary;\n","import React from 'react';\nimport { Heading } from 'design-system';\n\nconst Header = () => {\n  return (\n    <header className=\"App-header\">\n      <Heading size=\"l\" appearance=\"white\">\n        Covid-19\n      </Heading>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { Text } from 'design-system';\n\nconst Footer = () => {\n  const year = new Date().getFullYear();\n\n  return (\n    <footer className=\"App-footer\">\n      <Text\n        appearance=\"white\"\n        weight=\"strong\"\n      >\n        &copy; Copyright { year } Sandesh Choudhary\n      </Text>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Summary from './Summary';\nimport Header from './Header';\nimport Footer from './Footer';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"App-body\">\n        <Summary entity=\"WORLD\" />\n        <Summary entity=\"INDIA\" />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from 'apollo-boost';\n\nexport const client = new ApolloClient({\n  uri: 'https://covid-tracker-news-graphql.aregee.now.sh/',\n});\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { client } from './api';\n\nconsole.log(process.env)\n\n// if (process.env.NODE_SHELL_ENV === 'development') {\n//   ReactDOM.render(\n//     <React.StrictMode>\n//       <ApolloProvider client={client}>\n//         <Home />\n//       </ApolloProvider>\n//     </React.StrictMode>,\n//     document.getElementById('root')\n//   );\n// } else {\n  ReactDOM.render(\n    <React.StrictMode>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n// }\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}