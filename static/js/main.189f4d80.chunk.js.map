{"version":3,"sources":["query.js","Summary/index.js","App.js","serviceWorker.js","api/index.js","Header.js","Footer.js","Stats/index.js","Detail/index.js","References/index.js","index.js"],"names":["query","summary","india","gql","world","stats","columnOptions","size","sizeXL","sizeL","sizeM","sizeS","Summary","props","entity","type","showLink","history","useHistory","extractStats","result","country","mostRecent","state","useQuery","id","getQuery","loading","error","data","shadow","style","minHeight","padding","toUpperCase","className","appearance","Fragment","name","value","confirmed","deaths","recovered","COLORS","RADIAN","Math","PI","width","height","onMouseEnter","dataKey","cx","cy","labelLine","label","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","map","entry","length","key","getChart","fontSize","onClick","push","handleMore","App","Boolean","window","location","hostname","match","client","ApolloClient","uri","Header","Footer","year","Date","getFullYear","weight","href","Stats","schema","pinned","undefined","template","rowIndex","get","header","getData","states","countries","console","log","heading","maxHeight","loadMore","loadingMoreData","getGridActions","buffer","dynamicRowHeight","rowHeight","headerHeight","virtualization","stroke","barSize","Detail","params","useParams","link","References","ReactDOM","render","StrictMode","basename","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.189f4d80.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst query = {\n  summary: {\n    india: gql`\n      {country(name: \\\"India\\\") { name, mostRecent { confirmed, deaths, recovered}}}\n    `,\n    world: gql`\n      { summary{\n        confirmed,\n        deaths,\n        recovered } }\n    `\n  },\n  stats: {\n    world: gql`\n      {countries(names: []){ name, mostRecent { confirmed, deaths, recovered}}}    \n    `,\n    india: gql`\n      {states(country: \"India\", names: []){ name, mostRecent { confirmed, deaths, recovered, growthRate}}}\n    `\n  }\n}\n\nexport const getQuery = (type, id) => {\n  if (type === 'country' && id !== 'india') {\n    return gql`\n    {\n      country(name: \"${id}\") {\n        name\n        mostRecent{\n          confirmed\n          recovered\n          deaths\n        }\n      }\n    }\n  `\n  } else if (type === 'state') {\n    return gql`\n      {\n        states(country: \"India\", names: []) {\n          name\n        }\n      \n        state(country: \"India\", name: \"${id}\") {\n          name\n          mostRecent {\n            confirmed\n            deaths\n            recovered\n          }\n        }\n      }\n    `\n  } else if (type === 'world') {\n    return gql`\n      { summary{\n        confirmed,\n        deaths,\n        recovered } }\n    `\n  } else if (type === 'country' && id === 'india') {\n    return gql`\n      {country(name: \\\"India\\\") { name, mostRecent { confirmed, deaths, recovered}}}\n    `\n  }\n}\n\nexport default query;","import React from 'react';\nimport { Card, Spinner, Text, Heading, Row, Column, Button } from 'design-system';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useHistory } from \"react-router-dom\";\nimport {\n  PieChart, Pie, Sector, Cell, Tooltip\n} from 'recharts';\nimport './Summary.css';\nimport { getQuery } from '../query';\n\nconst columnOptions = {\n  size: \"12\",\n  sizeXL: \"6\",\n  sizeL: \"12\",\n  sizeM: \"6\",\n  sizeS: \"6\"\n};\n\nconst Summary = (props) => {\n  const { entity, type, showLink } = props;\n  let history = useHistory();\n\n  const extractStats = (entity, result) => {\n    const stats = type === 'country' ? result.country.mostRecent : type === 'state' ? result.state.mostRecent : result.summary;\n    return stats;\n  }\n\n  const getChart = stats => {\n    const data = [\n      {\n        name: 'Active', value: stats.confirmed - stats.deaths - stats.recovered\n      },\n      {\n        name: 'Deaths', value: stats.deaths\n      },\n      {\n        name: 'Recovered', value: stats.recovered\n      }\n    ]\n    const COLORS = ['#0070dd', '#d93737', '#2ea843'];\n    const RADIAN = Math.PI / 180; \n    const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\n      const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n     const x  = cx + radius * Math.cos(-midAngle * RADIAN);\n     const y = cy  + radius * Math.sin(-midAngle * RADIAN);\n    \n     return (\n       <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} \tdominantBaseline=\"central\">\n         {`${(percent * 100).toFixed(0)}%`}\n       </text>\n     );\n   };\n   return (\n    <PieChart width={200} height={200} onMouseEnter={() => null}>\n        <Pie\n          data={data}\n          dataKey=\"value\"\n          cx={100} \n          cy={100} \n          labelLine={false}\n          label={renderCustomizedLabel}\n          outerRadius={80} \n          fill=\"#8884d8\"\n        >\n          {\n            data.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]} key={index} />)\n          }\n        </Pie>\n        <Tooltip />\n      </PieChart>\n   )\n  }\n\n  const getLegends = stats => {\n    return (\n      <ul className=\"Summary-list\">\n        <li className=\"Summary-list-item\" key=\"0\">\n          <div className=\"Legend Legend--primary\"></div>\n          <Text>Active - {stats.confirmed - stats.deaths - stats.recovered}</Text>\n        </li>\n        <li key=\"1\" className=\"Summary-list-item\">\n          <div className=\"Legend Legend--success\"></div>\n          <Text>Recovered - {stats.recovered}</Text>\n        </li>\n        <li key=\"2\" className=\"Summary-list-item\">\n          <div className=\"Legend Legend--alert\"></div>\n          <Text>Deaths - {stats.deaths}</Text>\n        </li>\n      </ul>\n    )\n  }\n\n  const handleMore = entity => {\n    if(entity === 'india') {\n      history.push('/india');\n    } else {\n      history.push('/world');\n    }\n  }\n\n\n  const { loading, error, data } = useQuery(getQuery(type, entity));\n  return (\n    <Card\n      shadow=\"medium\"\n      style={{\n        minHeight: '200px',\n        padding: '16px'\n      }}\n    >\n      <Text>{entity.toUpperCase()} STATISTICS</Text>\n        {loading && (\n          <div className=\"Spinner-container\">\n            <Spinner size=\"large\" appearance=\"primary\" />\n          </div>\n        )}\n        {!loading && error && (\n          <p>Error :(</p>\n        )}\n        {!loading && !error && (\n          <React.Fragment>\n            <Row>\n              <Column {...columnOptions}>\n                {getChart(extractStats(entity, data))}\n              </Column>\n              <Column {...columnOptions}>\n                <Heading appearance=\"subtle\" size=\"m\">\n                  Total Patients\n                </Heading>\n                <Text appearance=\"destructive\" style={{fontSize: '40px'}}>\n                  {extractStats(entity, data).confirmed}\n                </Text>\n                {getLegends(extractStats(entity, data))}\n              </Column>\n            </Row>\n            {showLink && (\n              <div>\n                <Button appearance=\"primary\" onClick={() => handleMore(entity)}>Show More</Button>\n              </div>\n            )}\n          </React.Fragment>\n        )}\n    </Card>\n    );\n}\n\nexport default Summary;\n","import React from 'react';\nimport './App.css';\nimport Summary from './Summary';\nimport { Row, Column } from 'design-system';\n\nconst columnOptions = {\n  size: \"12\",\n  sizeXL: \"6\",\n  sizeL: \"12\",\n  sizeM: \"6\",\n  sizeS: \"6\"\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\">\n        <Row>\n          <Column {...columnOptions}>\n            <Summary entity=\"world\" type=\"world\" showLink={true} />\n          </Column>\n          <Column {...columnOptions}>\n            <Summary entity=\"india\" type=\"country\" showLink={true} />\n          </Column>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from 'apollo-boost';\n\nexport const client = new ApolloClient({\n  uri: 'https://covid-tracker-news-graphql.aregee.now.sh/',\n});\n\n","import React from 'react';\nimport { Heading } from 'design-system';\n\nconst Header = () => {\n  return (\n    <header className=\"App-header\">\n      <Heading size=\"l\" appearance=\"white\">\n        Covid-19\n      </Heading>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { Link, Text } from 'design-system';\n\nconst Footer = () => {\n  const year = new Date().getFullYear();\n\n  return (\n    <footer className=\"App-footer\">\n      <Text\n        appearance=\"white\"\n        weight=\"strong\"\n      >\n        &copy; Copyright { year } Sandesh Choudhary\n      </Text>\n      <Link href=\"/references\">References</Link>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport { Link, Breadcrumb, BreadcrumbsWrapper, Table, Text, Row, Column, Spinner } from 'design-system';\nimport { useHistory } from \"react-router-dom\";\nimport query from '../query';\nimport { useQuery } from '@apollo/react-hooks';\nimport './Stats.css';\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Area, Bar, Line, ResponsiveContainer } from 'recharts';\n\n\nconst columnOptions = {\n  size: \"12\",\n  sizeXL: \"6\",\n  sizeL: \"12\",\n  sizeM: \"6\",\n  sizeS: \"6\"\n};\n\nconst Stats = props => {\n  const { entity } = props;\n  let history = useHistory();\n\n  const handleDrill = id => {\n    history.push(`/${entity}/detail/${id}`)\n  }\n\n  const schema = [\n    {\n      width: 200,\n      pinned: false ? 'LEFT' : undefined,\n      template: ({ x, rowIndex }) => (\n        <div className=\"Stat-table-cell\">\n          <Link onClick={() => handleDrill(x)}>{x}</Link>\n        </div>\n      ),\n      get: ({ name }) => ({\n        x: name,\n      }),\n      header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Name</Text></div>,\n    },\n    {\n      width: 100,\n      pinned: false ? 'LEFT' : undefined,\n      template: ({ x, rowIndex }) => (\n        <div className=\"Stat-table-cell\">\n          {x}\n        </div>\n      ),\n      get: ({ mostRecent }) => ({\n        x: mostRecent.confirmed,\n      }),\n      header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Confirmed</Text></div>,\n    },\n    {\n      width: 100,\n      pinned: false ? 'LEFT' : undefined,\n      template: ({ x, rowIndex }) => (\n        <div className=\"Stat-table-cell\">\n          {x}\n        </div>\n      ),\n      get: ({ mostRecent }) => ({\n        x: mostRecent.recovered,\n      }),\n      header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Recovered</Text></div>,\n    },\n    {\n      width: 100,\n      pinned: false ? 'LEFT' : undefined,\n      template: ({ x, rowIndex }) => (\n        <div className=\"Stat-table-cell\">\n          {x}\n        </div>\n      ),\n      get: ({ mostRecent }) => ({\n        x: mostRecent.deaths,\n      }),\n      header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Deaths</Text></div>,\n    }\n  ]\n\n  const getData = (entity, data = {}) => {\n    return entity === 'india' ? data.states : data.countries;\n  }\n\n  const { loading, error, data } = useQuery(query.stats[entity]);\n  console.log(loading, error, data);\n\n\n  return (\n    <div className=\"Stats-container\">\n      <header>\n        <BreadcrumbsWrapper\n          heading={entity === 'india' ? 'State wise Data' : 'Country wise Data'}\n        >\n          <Breadcrumb>\n            <div className=\"Breadcrumb-link\">\n              <Link onClick={() => history.push('/')}>HOME</Link>\n            </div>\n          </Breadcrumb>\n        </BreadcrumbsWrapper>\n      </header>\n\n      {error && (\n        <div>error...</div>\n      )}\n\n      {!error && (\n        <div className=\"Stats-body\">\n          <Row>\n            <Column {...columnOptions}>\n              <Table\n                style={{\n                  maxHeight: 'calc(100vh - 252px)'\n                }}\n                loadMore={() => null}\n                loading={loading}\n                loadingMoreData={false}\n                getGridActions={false ? undefined : undefined}\n                buffer={5}\n                dynamicRowHeight={false}\n                rowHeight={50}\n                headerHeight={40}\n                virtualization={false}\n                schema={schema}\n                data={getData(entity, data)}\n              />\n            </Column>\n            <Column {...columnOptions}>\n              {loading && (\n                <div className=\"Spinner-container\">\n                  <Spinner size=\"large\" appearance=\"primary\" />\n                </div>\n              )}\n              {!loading && (\n                <ResponsiveContainer width={'100%'} height={250}>\n                  <ComposedChart data={getData(entity, data)}>\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <CartesianGrid stroke=\"#f5f5f5\" />\n                    <Area name=\"Recovered\" type=\"monotone\" dataKey=\"mostRecent[recovered]\" fill=\"#71c077\" stroke=\"#2ea843\" />\n                    <Bar name=\"Confirmed\" dataKey=\"mostRecent[confirmed]\" barSize={20} fill=\"#0070dd\" />\n                    <Line name=\"Deaths\" type=\"monotone\" dataKey=\"mostRecent[deaths]\" stroke=\"#d93737\" />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              )}\n            </Column>\n          </Row>\n        </div>                                    \n      )}\n    </div>  \n  );\n}\n\nexport default Stats;\n","import React from 'react';\nimport { BreadcrumbsWrapper, Breadcrumb, Link } from 'design-system';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Summary from '../Summary';\nimport './Detail.css';\n\nconst Detail = props => {\n  const { entity } = props;\n  let history = useHistory();\n  const params = useParams();\n\n  return (\n    <div className=\"Detail-container\">\n      <header>\n        <BreadcrumbsWrapper\n          heading={`${params.id} - Breakdown`}\n        >\n          <Breadcrumb>\n            <div className=\"Breadcrumb-link\">\n              <Link onClick={() => history.push('/')}>HOME</Link>\n            </div>\n          </Breadcrumb>\n          <Breadcrumb>\n            <div className=\"Breadcrumb-link\">\n              <Link onClick={() => history.push(`/${entity}`)}>{entity.toUpperCase()}</Link>\n            </div>\n          </Breadcrumb>\n        </BreadcrumbsWrapper>\n      </header>\n      <div className=\"Detail-body\">\n        <Summary entity={params.id} type={entity === 'world' ? 'country' : 'state'} />\n      </div>\n    </div>\n  );\n}\n\nexport default Detail;\n","import React from 'react';\nimport './References.css';\nimport { useHistory } from \"react-router-dom\";\nimport { BreadcrumbsWrapper, Breadcrumb, Link, Heading, Table, Text } from 'design-system';\n\nconst schema = [\n  {\n    width: 300,\n    template: ({ x, rowIndex }) => (\n      <div className=\"Stat-table-cell\">\n        <Text>{x}</Text>\n      </div>\n    ),\n    get: ({ name }) => ({\n      x: name,\n    }),\n    header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Name</Text></div>,\n  },\n  {\n    width: 300,\n    template: ({ x, rowIndex }) => (\n      <div className=\"Stat-table-cell\">\n        <Link>{x}</Link>\n      </div>\n    ),\n    get: ({ link }) => ({\n      x: link,\n    }),\n    header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Link</Text></div>,\n  }\n];\n\nconst data = [\n  {\n    name: \"World Health Organization (WHO)\",\n    link: \"https://www.who.int/\"\n  },\n  {\n    name: \"DXY.cn. Pneumonia. 2020.\",\n    link: \"http://3g.dxy.cn/newh5/view/pneumonia\"\n  },\n  {\n    name: \"BNO News\",\n    link: \"https://bnonews.com/index.php/2020/02/the-latest-coronavirus-cases/\"\n  },\n  {\n    name: \"National Health Commission of the People’s Republic of China (NHC)\",\n    link: \"http://www.nhc.gov.cn/xcs/yqtb/list_gzbd.shtml\"\n  },\n  {\n    name: \"China CDC (CCDC)\",\n    link: \"http://weekly.chinacdc.cn/news/TrackingtheEpidemic.htm\"\n  },\n  {\n    name: \"Hong Kong Department of Health\",\n    link: \"https://www.chp.gov.hk/en/features/102465.html\"\n  },\n  {\n    name: \"Macau Government\",\n    link: \"https://www.ssm.gov.mo/portal/\"\n  },\n  {\n    name: \"Taiwan CDC\",\n    link: \"https://sites.google.com/cdc.gov.tw/2019ncov/taiwan?authuser=0\"\n  },\n  {\n    name: \"US CDC\",\n    link: \"https://www.cdc.gov/coronavirus/2019-ncov/index.html\"\n  },\n  {\n    name: \"Government of Canada\",\n    link: \"https://www.canada.ca/en/public-health/services/diseases/coronavirus.html\"\n  },\n  {\n    name: \"Australia Government Department of Health\",\n    link: \"https://www.health.gov.au/news/coronavirus-update-at-a-glance\"\n  },\n  {\n    name: \"European Centre for Disease Prevention and Control (ECDC)\",\n    link: \"https://www.ecdc.europa.eu/en/geographical-distribution-2019-ncov-cases\"\n  },\n  {\n    name: \"Ministry of Health Singapore (MOH)\",\n    link: \"https://www.moh.gov.sg/covid-19\"\n  },\n  {\n    name: \"Italy Ministry of Health\",\n    link: \"http://www.salute.gov.it/nuovocoronavirus\"\n  },\n  {\n    name: \"1Point3Arces\",\n    link: \"https://coronavirus.1point3acres.com/en\"\n  },\n  {\n    name: \"WorldoMeters\",\n    link: \"https://www.worldometers.info/coronavirus/\"\n  },\n  {\n    name: \"COVID Tracking Project\",\n    link: \"https://covidtracking.com/data\"\n  },\n  {\n    name: \"NDTV Covid-19 Data\",\n    link: \"https://edata.ndtv.com/cricket/coronavirus/data.json\"\n  }\n];\n\nconst References = () => {\n  let history = useHistory();\n\n  return (\n    <div className=\"References-container\">\n      <BreadcrumbsWrapper heading=\"References\">\n        <Breadcrumb>\n          <div className=\"Breadcrumb-link\">\n            <Link onClick={() => history.push('/')}>Home</Link>\n          </div>\n        </Breadcrumb>\n      </BreadcrumbsWrapper>\n      <div className=\"References-table\">\n        <Heading>Data Sources</Heading>\n        <Table\n          schema={schema}\n          data={data}\n          style={{\n            maxHeight: 'calc(100vh - 252px)'\n          }}\n          virtualization={false}\n          loadMore={() => null}\n          rowHeight={50}\n          headerHeight={40}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default References;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { client } from './api';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Stats from './Stats';\nimport Detail from './Detail';\nimport References from './References';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <div>\n        <Header />\n        <Router basename=\"/covid\">\n          <Switch>\n            <Route exact path=\"/\">\n              <App />\n            </Route>\n            <Route path=\"/india/detail/:id\" exact>\n              <Detail entity=\"india\" />\n            </Route>\n            <Route path=\"/world/detail/:id\" exact>\n              <Detail entity=\"world\" />\n            </Route>\n            <Route path=\"/india\">\n              <Stats entity=\"india\" />\n            </Route>\n            <Route path=\"/world\">\n              <Stats entity=\"world\" />\n            </Route>\n            <Route path=\"/references\">\n              <References />\n            </Route>\n          </Switch>\n        </Router>\n        <Footer />\n      </div>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}