{"version":3,"sources":["Summary/index.js","App.js","serviceWorker.js","api/index.js","Header.js","Footer.js","query.js","Stats/index.js","index.js"],"names":["query","INDIA","gql","WORLD","columnOptions","size","sizeXL","sizeL","sizeM","sizeS","Summary","props","stats","entity","history","useHistory","extractStats","result","country","mostRecent","summary","useQuery","loading","error","data","shadow","style","minHeight","padding","className","appearance","Fragment","name","value","confirmed","deaths","recovered","COLORS","RADIAN","Math","PI","width","height","onMouseEnter","dataKey","cx","cy","labelLine","label","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","map","entry","length","key","getChart","fontSize","onClick","push","handleMore","App","Boolean","window","location","hostname","match","client","ApolloClient","uri","Header","Footer","year","Date","getFullYear","weight","schema","pinned","undefined","template","rowIndex","get","header","Stats","getData","states","countries","console","log","heading","maxHeight","loadMore","loadingMoreData","getGridActions","buffer","dynamicRowHeight","rowHeight","headerHeight","virtualization","stroke","type","barSize","ReactDOM","render","StrictMode","basename","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.67977ca7.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Spinner, Text, Heading, Row, Column, Button } from 'design-system';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { useHistory } from \"react-router-dom\";\nimport {\n  PieChart, Pie, Sector, Cell, Tooltip\n} from 'recharts';\nimport './Summary.css';\n\nconst query = {\n  INDIA: gql`\n    {country(name: \\\"India\\\") { name, mostRecent { confirmed, deaths, recovered}}}\n  `,\n  WORLD: gql`\n    { summary{\n      confirmed,\n      deaths,\n      recovered } }\n  `\n};\n\nconst columnOptions = {\n  size: \"12\",\n  sizeXL: \"6\",\n  sizeL: \"12\",\n  sizeM: \"6\",\n  sizeS: \"6\"\n};\n\nconst Summary = (props) => {\n  const { entity } = props;\n  let history = useHistory();\n\n  const extractStats = (entity, result) => {\n    const stats = entity === 'INDIA' ? result.country.mostRecent : result.summary;\n    return stats;\n  }\n\n  const getChart = stats => {\n    const data = [\n      {\n        name: 'Active', value: stats.confirmed - stats.deaths - stats.recovered\n      },\n      {\n        name: 'Deaths', value: stats.deaths\n      },\n      {\n        name: 'Recovered', value: stats.recovered\n      }\n    ]\n    const COLORS = ['#0070dd', '#d93737', '#2ea843'];\n    const RADIAN = Math.PI / 180; \n    const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\n      const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n     const x  = cx + radius * Math.cos(-midAngle * RADIAN);\n     const y = cy  + radius * Math.sin(-midAngle * RADIAN);\n    \n     return (\n       <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} \tdominantBaseline=\"central\">\n         {`${(percent * 100).toFixed(0)}%`}\n       </text>\n     );\n   };\n   return (\n    <PieChart width={200} height={200} onMouseEnter={() => null}>\n        <Pie\n          data={data}\n          dataKey=\"value\"\n          cx={100} \n          cy={100} \n          labelLine={false}\n          label={renderCustomizedLabel}\n          outerRadius={80} \n          fill=\"#8884d8\"\n        >\n          {\n            data.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]} key={index} />)\n          }\n        </Pie>\n        <Tooltip />\n      </PieChart>\n   )\n  }\n\n  const getLegends = stats => {\n    return (\n      <ul className=\"Summary-list\">\n        <li className=\"Summary-list-item\" key=\"0\">\n          <div className=\"Legend Legend--primary\"></div>\n          <Text>Active - {stats.confirmed - stats.deaths - stats.recovered}</Text>\n        </li>\n        <li key=\"1\" className=\"Summary-list-item\">\n          <div className=\"Legend Legend--success\"></div>\n          <Text>Recovered - {stats.recovered}</Text>\n        </li>\n        <li key=\"2\" className=\"Summary-list-item\">\n          <div className=\"Legend Legend--alert\"></div>\n          <Text>Deaths - {stats.deaths}</Text>\n        </li>\n      </ul>\n    )\n  }\n\n  const handleMore = entity => {\n    if(entity === 'INDIA') {\n      history.push('/india');\n    } else {\n      history.push('/world');\n    }\n  }\n\n\n  const { loading, error, data } = useQuery(query[entity]);\n  return (\n    <Card\n      shadow=\"medium\"\n      style={{\n        minHeight: '200px',\n        padding: '16px'\n      }}\n    >\n      <Text>{entity} STATISTICS</Text>\n        {loading && (\n          <div className=\"Spinner-container\">\n            <Spinner size=\"large\" appearance=\"primary\" />\n          </div>\n        )}\n        {!loading && error && (\n          <p>Error :(</p>\n        )}\n        {!loading && !error && (\n          <React.Fragment>\n            <Row>\n              <Column {...columnOptions}>\n                {getChart(extractStats(entity, data))}\n              </Column>\n              <Column {...columnOptions}>\n                <Heading appearance=\"subtle\" size=\"m\">\n                  Total Patients\n                </Heading>\n                <Text appearance=\"destructive\" style={{fontSize: '40px'}}>\n                  {extractStats(entity, data).confirmed}\n                </Text>\n                {getLegends(extractStats(entity, data))}\n              </Column>\n            </Row>\n            <div>\n              <Button appearance=\"primary\" onClick={() => handleMore(entity)}>Show More</Button>\n            </div>\n          </React.Fragment>\n        )}\n    </Card>\n    );\n}\n\nexport default Summary;\n","import React from 'react';\nimport './App.css';\nimport Summary from './Summary';\nimport { Row, Column } from 'design-system';\n\nconst columnOptions = {\n  size: \"12\",\n  sizeXL: \"6\",\n  sizeL: \"12\",\n  sizeM: \"6\",\n  sizeS: \"6\"\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\">\n        <Row>\n          <Column {...columnOptions}>\n            <Summary entity=\"WORLD\" />\n          </Column>\n          <Column {...columnOptions}>\n            <Summary entity=\"INDIA\" />\n          </Column>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from 'apollo-boost';\n\nexport const client = new ApolloClient({\n  uri: 'https://covid-tracker-news-graphql.aregee.now.sh/',\n});\n\n","import React from 'react';\nimport { Heading } from 'design-system';\n\nconst Header = () => {\n  return (\n    <header className=\"App-header\">\n      <Heading size=\"l\" appearance=\"white\">\n        Covid-19\n      </Heading>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { Text } from 'design-system';\n\nconst Footer = () => {\n  const year = new Date().getFullYear();\n\n  return (\n    <footer className=\"App-footer\">\n      <Text\n        appearance=\"white\"\n        weight=\"strong\"\n      >\n        &copy; Copyright { year } Sandesh Choudhary\n      </Text>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import { gql } from 'apollo-boost';\n\nconst query = {\n  summary: {\n    INDIA: gql`\n      {country(name: \\\"India\\\") { name, mostRecent { confirmed, deaths, recovered}}}\n    `,\n    WORLD: gql`\n      { summary{\n        confirmed,\n        deaths,\n        recovered } }\n    `\n  },\n  stats: {\n    WORLD: gql`\n      {countries(names: []){ name, mostRecent { confirmed, deaths, recovered}}}    \n    `,\n    INDIA: gql`\n      {states(country: \"India\", names: []){ name, mostRecent { confirmed, deaths, recovered, growthRate}}}\n    `\n  }\n}\n\nexport default query;","import React from 'react';\nimport { Link, Breadcrumb, BreadcrumbsWrapper, Table, Text, Row, Column, Spinner } from 'design-system';\nimport { useHistory } from \"react-router-dom\";\nimport query from '../query';\nimport { useQuery } from '@apollo/react-hooks';\nimport './Stats.css';\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Area, Bar, Line, ResponsiveContainer } from 'recharts';\n\nconst schema = [\n  {\n    width: 200,\n    pinned: false ? 'LEFT' : undefined,\n    template: ({ x, rowIndex }) => (\n      <div className=\"Stat-table-cell\">\n        {x}\n      </div>\n    ),\n    get: ({ name }) => ({\n      x: name,\n    }),\n    header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Name</Text></div>,\n  },\n  {\n    width: 100,\n    pinned: false ? 'LEFT' : undefined,\n    template: ({ x, rowIndex }) => (\n      <div className=\"Stat-table-cell\">\n        {x}\n      </div>\n    ),\n    get: ({ mostRecent }) => ({\n      x: mostRecent.confirmed,\n    }),\n    header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Confirmed</Text></div>,\n  },\n  {\n    width: 100,\n    pinned: false ? 'LEFT' : undefined,\n    template: ({ x, rowIndex }) => (\n      <div className=\"Stat-table-cell\">\n        {x}\n      </div>\n    ),\n    get: ({ mostRecent }) => ({\n      x: mostRecent.recovered,\n    }),\n    header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Recovered</Text></div>,\n  },\n  {\n    width: 100,\n    pinned: false ? 'LEFT' : undefined,\n    template: ({ x, rowIndex }) => (\n      <div className=\"Stat-table-cell\">\n        {x}\n      </div>\n    ),\n    get: ({ mostRecent }) => ({\n      x: mostRecent.deaths,\n    }),\n    header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Deaths</Text></div>,\n  }\n]\n\nconst columnOptions = {\n  size: \"12\",\n  sizeXL: \"6\",\n  sizeL: \"12\",\n  sizeM: \"6\",\n  sizeS: \"6\"\n};\n\nconst Stats = props => {\n  const { entity } = props;\n  let history = useHistory();\n\n  const getData = (entity, data = {}) => {\n    return entity === 'INDIA' ? data.states : data.countries;\n  }\n\n  const { loading, error, data } = useQuery(query.stats[entity]);\n  console.log(loading, error, data);\n\n\n  return (\n    <div className=\"Stats-container\">\n      <header>\n        <BreadcrumbsWrapper\n          heading={entity === 'INDIA' ? 'State wise Data' : 'Country wise Data'}\n        >\n          <Breadcrumb>\n            <div className=\"Breadcrumb-link\">\n              <Link onClick={() => history.push('/')}>Home</Link>\n            </div>\n          </Breadcrumb>\n        </BreadcrumbsWrapper>\n      </header>\n\n      {error && (\n        <div>error...</div>\n      )}\n\n      {!error && (\n        <div className=\"Stats-body\">\n          <Row>\n            <Column {...columnOptions}>\n              <Table\n                style={{\n                  maxHeight: 'calc(100vh - 252px)'\n                }}\n                loadMore={() => null}\n                loading={loading}\n                loadingMoreData={false}\n                getGridActions={false ? undefined : undefined}\n                buffer={5}\n                dynamicRowHeight={false}\n                rowHeight={50}\n                headerHeight={40}\n                virtualization={false}\n                schema={schema}\n                data={getData(entity, data)}\n              />\n            </Column>\n            <Column {...columnOptions}>\n              {loading && (\n                <div className=\"Spinner-container\">\n                  <Spinner size=\"large\" appearance=\"primary\" />\n                </div>\n              )}\n              {!loading && (\n                <ResponsiveContainer width={'100%'} height={250}>\n                  <ComposedChart data={getData(entity, data)}>\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <CartesianGrid stroke=\"#f5f5f5\" />\n                    <Area name=\"Recovered\" type=\"monotone\" dataKey=\"mostRecent[recovered]\" fill=\"#71c077\" stroke=\"#2ea843\" />\n                    <Bar name=\"Confirmed\" dataKey=\"mostRecent[confirmed]\" barSize={20} fill=\"#0070dd\" />\n                    <Line name=\"Deaths\" type=\"monotone\" dataKey=\"mostRecent[deaths]\" stroke=\"#d93737\" />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              )}\n            </Column>\n          </Row>\n        </div>                                    \n      )}\n    </div>  \n  );\n}\n\nexport default Stats;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { client } from './api';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Stats from './Stats';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <div>\n        <Header />\n        <Router basename=\"/covid\">\n          <Switch>\n            <Route exact path=\"/\">\n              <App />\n            </Route>\n            <Route path=\"/india\">\n              <Stats entity=\"INDIA\" />\n            </Route>\n            <Route path=\"/world\">\n              <Stats entity=\"WORLD\" />\n            </Route>\n          </Switch>\n        </Router>\n        <Footer />\n      </div>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}