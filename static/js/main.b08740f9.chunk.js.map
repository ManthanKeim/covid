{"version":3,"sources":["query.js","Summary/index.js","HeatMaps/India/index.js","App.js","serviceWorker.js","api/index.js","Header.js","Footer.js","Stats/index.js","Detail/index.js","References/index.js","index.js"],"names":["query","summary","india","gql","world","stats","getQuery","type","id","columnOptions","size","sizeXL","sizeL","sizeM","sizeS","Summary","props","entity","showLink","history","useHistory","extractStats","result","country","mostRecent","state","useQuery","loading","error","data","shadow","style","minHeight","padding","toUpperCase","className","appearance","Fragment","name","value","confirmed","deaths","recovered","COLORS","RADIAN","Math","PI","width","height","onMouseEnter","dataKey","cx","cy","labelLine","label","midAngle","innerRadius","outerRadius","percent","radius","index","x","cos","y","sin","fill","textAnchor","dominantBaseline","toFixed","map","entry","length","key","getChart","fontSize","onClick","push","handleMore","icon","iconAlign","statesMapping","require","PROJECTION_CONFIG","scale","center","colorStyle","total","HeatMapIndia","statsLoading","statsError","statsData","console","log","mapData","states","getHeatMapData","projectionConfig","projection","geography","geographies","geo","current","find","s","rsmKey","App","weight","Boolean","window","location","hostname","match","client","ApolloClient","uri","Header","Footer","year","Date","getFullYear","useState","React","useEffect","Stats","searchQuery","setSearchQuery","handleSearch","schema","pinned","undefined","template","rowIndex","get","header","getData","list","countries","filter","item","toLowerCase","indexOf","heading","clearButton","placeholder","onChange","ev","target","onClear","info","maxHeight","loadMore","loadingMoreData","getGridActions","buffer","dynamicRowHeight","rowHeight","headerHeight","virtualization","stroke","barSize","Detail","params","useParams","link","References","ReactDOM","render","StrictMode","basename","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b08740f9.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst query = {\n  summary: {\n    india: gql`\n      {country(name: \\\"India\\\") { name, mostRecent { confirmed, deaths, recovered}}}\n    `,\n    world: gql`\n      { summary{\n        confirmed,\n        deaths,\n        recovered } }\n    `\n  },\n  stats: {\n    world: gql`\n      {countries(names: []){ name, mostRecent { confirmed, deaths, recovered}}}    \n    `,\n    india: gql`\n      {states(country: \"India\", names: []){ name, mostRecent { confirmed, deaths, recovered}}}\n    `\n  }\n}\n\nexport const getQuery = (type, id) => {\n  if (type === 'country' && id !== 'india') {\n    return gql`\n    {\n      country(name: \"${id}\") {\n        name\n        mostRecent{\n          confirmed\n          recovered\n          deaths\n        }\n      }\n    }\n  `\n  } else if (type === 'state') {\n    return gql`\n      {\n        states(country: \"India\", names: []) {\n          name\n        }\n      \n        state(country: \"India\", name: \"${id}\") {\n          name\n          mostRecent {\n            confirmed\n            deaths\n            recovered\n          }\n        }\n      }\n    `\n  } else if (type === 'world') {\n    return gql`\n      { summary{\n        confirmed,\n        deaths,\n        recovered } }\n    `\n  } else if (type === 'country' && id === 'india') {\n    return gql`\n      {country(name: \\\"India\\\") { name, mostRecent { confirmed, deaths, recovered}}}\n    `\n  }\n}\n\nexport default query;","import React from 'react';\nimport { Card, Spinner, Text, Heading, Row, Column, Button } from 'design-system';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useHistory } from \"react-router-dom\";\nimport {\n  PieChart, Pie, Sector, Cell, Tooltip\n} from 'recharts';\nimport './Summary.css';\nimport { getQuery } from '../query';\n\nconst columnOptions = {\n  size: \"12\",\n  sizeXL: \"6\",\n  sizeL: \"12\",\n  sizeM: \"6\",\n  sizeS: \"6\"\n};\n\nconst Summary = (props) => {\n  const { entity, type, showLink } = props;\n  let history = useHistory();\n\n  const extractStats = (entity, result) => {\n    const stats = type === 'country' ? result.country.mostRecent : type === 'state' ? result.state.mostRecent : result.summary;\n    return stats;\n  }\n\n  const getChart = stats => {\n    const data = [\n      {\n        name: 'Active', value: stats.confirmed - stats.deaths - stats.recovered\n      },\n      {\n        name: 'Deaths', value: stats.deaths\n      },\n      {\n        name: 'Recovered', value: stats.recovered\n      }\n    ]\n    const COLORS = ['#0070dd', '#d93737', '#2ea843'];\n    const RADIAN = Math.PI / 180; \n    const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\n      const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n     const x  = cx + radius * Math.cos(-midAngle * RADIAN);\n     const y = cy  + radius * Math.sin(-midAngle * RADIAN);\n    \n     return (\n       <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} \tdominantBaseline=\"central\">\n         {`${(percent * 100).toFixed(0)}%`}\n       </text>\n     );\n   };\n   return (\n    <PieChart width={200} height={200} onMouseEnter={() => null}>\n        <Pie\n          data={data}\n          dataKey=\"value\"\n          cx={100} \n          cy={100} \n          labelLine={false}\n          label={renderCustomizedLabel}\n          outerRadius={80} \n          fill=\"#8884d8\"\n        >\n          {\n            data.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]} key={index} />)\n          }\n        </Pie>\n        <Tooltip />\n      </PieChart>\n   )\n  }\n\n  const getLegends = stats => {\n    return (\n      <ul className=\"Summary-list\">\n        <li className=\"Summary-list-item\" key=\"0\">\n          <div className=\"Legend Legend--primary\"></div>\n          <Text>Active - {stats.confirmed - stats.deaths - stats.recovered}</Text>\n        </li>\n        <li key=\"1\" className=\"Summary-list-item\">\n          <div className=\"Legend Legend--success\"></div>\n          <Text>Recovered - {stats.recovered}</Text>\n        </li>\n        <li key=\"2\" className=\"Summary-list-item\">\n          <div className=\"Legend Legend--alert\"></div>\n          <Text>Deaths - {stats.deaths}</Text>\n        </li>\n      </ul>\n    )\n  }\n\n  const handleMore = entity => {\n    if(entity === 'india') {\n      history.push('/india');\n    } else {\n      history.push('/world');\n    }\n  }\n\n\n  const { loading, error, data } = useQuery(getQuery(type, entity));\n  return (\n    <Card\n      shadow=\"medium\"\n      style={{\n        minHeight: '200px',\n        padding: '16px'\n      }}\n    >\n      <Text>{entity.toUpperCase()} STATISTICS</Text>\n        {loading && (\n          <div className=\"Spinner-container\">\n            <Spinner size=\"large\" appearance=\"primary\" />\n          </div>\n        )}\n        {!loading && error && (\n          <p>Error :(</p>\n        )}\n        {!loading && !error && (\n          <React.Fragment>\n            <Row>\n              <Column {...columnOptions}>\n                {getChart(extractStats(entity, data))}\n              </Column>\n              <Column {...columnOptions}>\n                <Heading appearance=\"subtle\" size=\"m\">\n                  Total Patients\n                </Heading>\n                <Text appearance=\"destructive\" style={{fontSize: '40px'}}>\n                  {extractStats(entity, data).confirmed}\n                </Text>\n                {getLegends(extractStats(entity, data))}\n              </Column>\n            </Row>\n            {showLink && (\n              <div>\n                <Button appearance=\"primary\" onClick={() => handleMore(entity)}\n                  icon=\"trending_flat\"\n                  iconAlign=\"right\">\n                  Show More\n                </Button>\n              </div>\n            )}\n          </React.Fragment>\n        )}\n    </Card>\n    );\n}\n\nexport default Summary;\n","import React from 'react';\nimport { Spinner } from 'design-system';\nimport { \n  ComposableMap, Geographies, Geography , ZoomableGroup, Marker\n} from 'react-simple-maps';\nimport query, {getQuery} from '../../query';\nimport { useQuery } from '@apollo/react-hooks';\nconst statesMapping = require('./statesMapping.json');\nconst latLong = require('./latLong.json');\n\nconst PROJECTION_CONFIG = {\n  scale: 350,\n  center: [78.9629, 22.5937]\n};\n\nconst getHeatMapData = data => {\n  const {states} = data;\n  const list = states.map(state => {\n    state.id = statesMapping[state.name];\n    return state;\n  });\n  return list;\n}\n\nconst DEFAULT_COLOR = '#f9e2e2';\n\nconst colorStyle = (value, total) => {\n  const percent = (value/total) * 100;\n    if (percent <= 2) return '#f9e2e2';\n    if (percent > 2 && percent <=4) return '#f7ada5';\n    if (percent > 4 && percent <= 8) return '#eb776c';\n    if (percent > 8 && percent <= 10) return '#d93737';\n    if (percent > 10 && percent <= 20) return '#9c2828';\n    return '#631919';\n}\n\nconst geoUrl =\n  \"https://rawgit.com/Anujarya300/bubble_maps/master/data/geography-data/india.topo.json\"\n\n  const HeatMapIndia = (props) => {\n    const { loading, error, data } = useQuery(query.stats.india);\n    const { loading : statsLoading, error : statsError, data: statsData } = useQuery(getQuery('country', 'india'));\n    console.log(statsData)\n    if (loading || statsLoading) {\n      return (\n        <div className=\"Spinner-container\">\n          <Spinner size=\"large\" appearance=\"primary\" />\n        </div>\n      );\n    }\n    if (error || statsError) {\n      return null;\n    }\n    const mapData = getHeatMapData(data);\n\n    return (\n      <div>\n          <ComposableMap projectionConfig={PROJECTION_CONFIG} projection=\"geoMercator\"\n        width={450}\n        height={200}>\n          {/* <ZoomableGroup zoom={1}> */}\n            <Geographies geography={geoUrl}>\n              {({geographies}) => geographies.map(geo => {\n                const current = mapData.find(s => s.id === geo.id);\n                return (\n                  <Geography key={geo.rsmKey} geography={geo}\n                    fill={current ? colorStyle(current.mostRecent.confirmed, statsData.country.mostRecent.confirmed) : DEFAULT_COLOR}\n                  />\n                )\n              }\n              \n              )}\n            </Geographies>\n          {/* {latLong.states.map(({ name, coordinates, markerOffset }) => (\n            <Marker key={name} coordinates={coordinates}>\n              <circle r={2} fill=\"#F00\" stroke=\"#fff\" strokeWidth={2} />\n              <text\n                textAnchor=\"middle\"\n                y={markerOffset}\n                style={{ fill: \"#5D5A6D\", fontSize: '8px' }}\n              >\n                {name}\n              </text>\n            </Marker>\n          ))} */}\n          {/* </ZoomableGroup> */}\n          </ComposableMap>\n        </div>\n    )\n  }\n\nexport default HeatMapIndia;","import React from 'react';\nimport './App.css';\nimport Summary from './Summary';\nimport { Row, Column, Message, Text } from 'design-system';\nimport HeatMapIndia from './HeatMaps/India';\n\nconst columnOptions = {\n  size: \"12\",\n  sizeXL: \"6\",\n  sizeL: \"12\",\n  sizeM: \"6\",\n  sizeS: \"6\"\n};\n\nconst getLegends = () => {\n  return (\n    <ul className=\"Summary-list mt-4\">\n      <li className=\"Summary-list-item\" key=\"0\">\n        <div className=\"Legend Legend--mirch-lightest\"></div>\n        <Text> &#60;&#61; 2%</Text>\n      </li>\n      <li className=\"Summary-list-item\" key=\"1\">\n        <div className=\"Legend Legend--mirch-lighter\"></div>\n        <Text> &#62; 2% and &#60;&#61; 4% </Text>\n      </li>\n      <li className=\"Summary-list-item\" key=\"2\">\n        <div className=\"Legend Legend--mirch-light\"></div>\n        <Text> &#62; 4% and &#60;&#61; 8% </Text>\n      </li>\n      <li className=\"Summary-list-item\" key=\"3\">\n        <div className=\"Legend Legend--mirch\"></div>\n        <Text> &#62; 8% and &#60;&#61; 10% </Text>\n      </li>\n      <li className=\"Summary-list-item\" key=\"4\">\n        <div className=\"Legend Legend--mirch-dark\"></div>\n        <Text> &#62; 10% and &#60;&#61; 20% </Text>\n      </li>\n      <li className=\"Summary-list-item\" key=\"5\">\n        <div className=\"Legend Legend--mirch-darker\"></div>\n        <Text> &#62; 20%</Text>\n      </li>\n    </ul>\n  )\n}\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\">\n        <Row>\n          <Column {...columnOptions}>\n            <HeatMapIndia />\n          </Column>\n          <Column {...columnOptions}>\n            <div className=\"p-6\">\n              <Message appearance=\"info\">\n                This portal is not responsible for any kind of misinformation provided as all the data is from referenced data sources.\n              </Message>\n              <Text appearance=\"subtle\" weight=\"strong\" size=\"large\">Heat map of India (Confirmed cases)</Text>\n              {getLegends()}\n            </div>\n          </Column>\n        </Row>\n        <Row>\n          <Column {...columnOptions}>\n            <Summary entity=\"world\" type=\"world\" showLink={true} />\n          </Column>\n          <Column {...columnOptions}>\n            <Summary entity=\"india\" type=\"country\" showLink={true} />\n          </Column>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ApolloClient from 'apollo-boost';\n\nexport const client = new ApolloClient({\n  uri: 'https://covid-tracker-news-graphql.aregee.now.sh/',\n});\n\n","import React from 'react';\nimport { Heading } from 'design-system';\n\nconst Header = () => {\n  return (\n    <header className=\"App-header\">\n      <Heading size=\"l\" appearance=\"white\">\n        Covid-19\n      </Heading>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { Link, Text } from 'design-system';\nimport { useHistory } from 'react-router-dom';\n\nconst Footer = props => {\n  const year = new Date().getFullYear();\n  let history = useHistory();\n\n  return (\n    <footer className=\"App-footer\">\n      <Text\n        appearance=\"white\"\n        weight=\"strong\"\n      >\n        &copy; Copyright { year } Sandesh Choudhary\n      </Text>\n      <Link onClick={() => history.push('/references')}>References</Link>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport { Link, Breadcrumb, BreadcrumbsWrapper, Table, Text, Row, Column, Spinner, Input } from 'design-system';\nimport { useHistory } from \"react-router-dom\";\nimport query from '../query';\nimport { useQuery } from '@apollo/react-hooks';\nimport './Stats.css';\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Area, Bar, Line, ResponsiveContainer } from 'recharts';\nconst { useEffect, useState } = React;\n\n\nconst columnOptions = {\n  size: \"12\",\n  sizeXL: \"6\",\n  sizeL: \"12\",\n  sizeM: \"6\",\n  sizeS: \"6\"\n};\n\nconst Stats = props => {\n  const { entity } = props;\n  let history = useHistory();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleSearch = value => {\n    setSearchQuery(value);\n  }\n\n  const handleDrill = id => {\n    history.push(`/${entity}/detail/${id}`)\n  }\n\n  const schema = [\n    {\n      width: 200,\n      pinned: false ? 'LEFT' : undefined,\n      template: ({ x, rowIndex }) => (\n        <div className=\"Stat-table-cell\">\n          <Link onClick={() => handleDrill(x)}>{x}</Link>\n        </div>\n      ),\n      get: ({ name }) => ({\n        x: name,\n      }),\n      header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Name</Text></div>,\n    },\n    {\n      width: 100,\n      pinned: false ? 'LEFT' : undefined,\n      template: ({ x, rowIndex }) => (\n        <div className=\"Stat-table-cell\">\n          {x}\n        </div>\n      ),\n      get: ({ mostRecent }) => ({\n        x: mostRecent.confirmed,\n      }),\n      header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Confirmed</Text></div>,\n    },\n    {\n      width: 100,\n      pinned: false ? 'LEFT' : undefined,\n      template: ({ x, rowIndex }) => (\n        <div className=\"Stat-table-cell\">\n          {x}\n        </div>\n      ),\n      get: ({ mostRecent }) => ({\n        x: mostRecent.recovered,\n      }),\n      header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Recovered</Text></div>,\n    },\n    {\n      width: 100,\n      pinned: false ? 'LEFT' : undefined,\n      template: ({ x, rowIndex }) => (\n        <div className=\"Stat-table-cell\">\n          {x}\n        </div>\n      ),\n      get: ({ mostRecent }) => ({\n        x: mostRecent.deaths,\n      }),\n      header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Deaths</Text></div>,\n    }\n  ]\n\n  const getData = (entity, data = {}) => {\n    const list = entity === 'india' ? data.states : data.countries;\n    if (!list) return [];\n    return list.filter(item => {\n      return item.name.toLowerCase().indexOf(searchQuery.toLowerCase()) > -1;\n    });\n  }\n\n  const { loading, error, data } = useQuery(query.stats[entity]);\n\n  return (\n    <div className=\"Stats-container\">\n      <header>\n        <BreadcrumbsWrapper\n          heading={entity === 'india' ? 'State wise Data' : 'Country wise Data'}\n        >\n          <Breadcrumb>\n            <div className=\"Breadcrumb-link\">\n              <Link onClick={() => history.push('/')}>HOME</Link>\n            </div>\n          </Breadcrumb>\n        </BreadcrumbsWrapper>\n      </header>\n\n      {error && (\n        <div>error...</div>\n      )}\n\n      {!error && (\n        <div className=\"Stats-body\">\n          <Row>\n            <Input clearButton={true}\n              value={searchQuery}\n              icon=\"search\"\n              name=\"input\"\n              placeholder=\"Search\"\n              onChange={ev => handleSearch(ev.target.value) }\n              onClear={() => handleSearch('')}\n              info=\"Search on name\" />\n          </Row>\n          <Row>\n            <Column {...columnOptions}>\n              <Table\n                style={{\n                  maxHeight: 'calc(100vh - 300px)'\n                }}\n                loadMore={() => null}\n                loading={loading}\n                loadingMoreData={false}\n                getGridActions={false ? undefined : undefined}\n                buffer={5}\n                dynamicRowHeight={false}\n                rowHeight={50}\n                headerHeight={40}\n                virtualization={false}\n                schema={schema}\n                data={getData(entity, data)}\n              />\n            </Column>\n            <Column {...columnOptions}>\n              {loading && (\n                <div className=\"Spinner-container\">\n                  <Spinner size=\"large\" appearance=\"primary\" />\n                </div>\n              )}\n              {!loading && (\n                <ResponsiveContainer width={'100%'} height={250}>\n                  <ComposedChart data={getData(entity, data)}>\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <CartesianGrid stroke=\"#f5f5f5\" />\n                    <Area name=\"Recovered\" type=\"monotone\" dataKey=\"mostRecent[recovered]\" fill=\"#71c077\" stroke=\"#2ea843\" />\n                    <Bar name=\"Confirmed\" dataKey=\"mostRecent[confirmed]\" barSize={20} fill=\"#0070dd\" />\n                    <Line name=\"Deaths\" type=\"monotone\" dataKey=\"mostRecent[deaths]\" stroke=\"#d93737\" />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              )}\n            </Column>\n          </Row>\n        </div>                                    \n      )}\n    </div>  \n  );\n}\n\nexport default Stats;\n","import React from 'react';\nimport { BreadcrumbsWrapper, Breadcrumb, Link } from 'design-system';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Summary from '../Summary';\nimport './Detail.css';\n\nconst Detail = props => {\n  const { entity } = props;\n  let history = useHistory();\n  const params = useParams();\n\n  return (\n    <div className=\"Detail-container\">\n      <header>\n        <BreadcrumbsWrapper\n          heading={`${params.id} - Breakdown`}\n        >\n          <Breadcrumb>\n            <div className=\"Breadcrumb-link\">\n              <Link onClick={() => history.push('/')}>HOME</Link>\n            </div>\n          </Breadcrumb>\n          <Breadcrumb>\n            <div className=\"Breadcrumb-link\">\n              <Link onClick={() => history.push(`/${entity}`)}>{entity.toUpperCase()}</Link>\n            </div>\n          </Breadcrumb>\n        </BreadcrumbsWrapper>\n      </header>\n      <div className=\"Detail-body\">\n        <Summary entity={params.id} type={entity === 'world' ? 'country' : 'state'} />\n      </div>\n    </div>\n  );\n}\n\nexport default Detail;\n","import React from 'react';\nimport './References.css';\nimport { useHistory } from \"react-router-dom\";\nimport { BreadcrumbsWrapper, Breadcrumb, Link, Heading, Table, Text } from 'design-system';\n\nconst schema = [\n  {\n    width: 300,\n    template: ({ x, rowIndex }) => (\n      <div className=\"Stat-table-cell\">\n        <Text>{x}</Text>\n      </div>\n    ),\n    get: ({ name }) => ({\n      x: name,\n    }),\n    header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Name</Text></div>,\n  },\n  {\n    width: 300,\n    template: ({ x, rowIndex }) => (\n      <div className=\"Stat-table-cell\">\n        <Link>{x}</Link>\n      </div>\n    ),\n    get: ({ link }) => ({\n      x: link,\n    }),\n    header: () => <div className=\"Stat-table-cell\"><Text weight=\"strong\">Link</Text></div>,\n  }\n];\n\nconst data = [\n  {\n    name: \"World Health Organization (WHO)\",\n    link: \"https://www.who.int/\"\n  },\n  {\n    name: \"DXY.cn. Pneumonia. 2020.\",\n    link: \"http://3g.dxy.cn/newh5/view/pneumonia\"\n  },\n  {\n    name: \"BNO News\",\n    link: \"https://bnonews.com/index.php/2020/02/the-latest-coronavirus-cases/\"\n  },\n  {\n    name: \"National Health Commission of the People’s Republic of China (NHC)\",\n    link: \"http://www.nhc.gov.cn/xcs/yqtb/list_gzbd.shtml\"\n  },\n  {\n    name: \"China CDC (CCDC)\",\n    link: \"http://weekly.chinacdc.cn/news/TrackingtheEpidemic.htm\"\n  },\n  {\n    name: \"Hong Kong Department of Health\",\n    link: \"https://www.chp.gov.hk/en/features/102465.html\"\n  },\n  {\n    name: \"Macau Government\",\n    link: \"https://www.ssm.gov.mo/portal/\"\n  },\n  {\n    name: \"Taiwan CDC\",\n    link: \"https://sites.google.com/cdc.gov.tw/2019ncov/taiwan?authuser=0\"\n  },\n  {\n    name: \"US CDC\",\n    link: \"https://www.cdc.gov/coronavirus/2019-ncov/index.html\"\n  },\n  {\n    name: \"Government of Canada\",\n    link: \"https://www.canada.ca/en/public-health/services/diseases/coronavirus.html\"\n  },\n  {\n    name: \"Australia Government Department of Health\",\n    link: \"https://www.health.gov.au/news/coronavirus-update-at-a-glance\"\n  },\n  {\n    name: \"European Centre for Disease Prevention and Control (ECDC)\",\n    link: \"https://www.ecdc.europa.eu/en/geographical-distribution-2019-ncov-cases\"\n  },\n  {\n    name: \"Ministry of Health Singapore (MOH)\",\n    link: \"https://www.moh.gov.sg/covid-19\"\n  },\n  {\n    name: \"Italy Ministry of Health\",\n    link: \"http://www.salute.gov.it/nuovocoronavirus\"\n  },\n  {\n    name: \"1Point3Arces\",\n    link: \"https://coronavirus.1point3acres.com/en\"\n  },\n  {\n    name: \"WorldoMeters\",\n    link: \"https://www.worldometers.info/coronavirus/\"\n  },\n  {\n    name: \"COVID Tracking Project\",\n    link: \"https://covidtracking.com/data\"\n  },\n  {\n    name: \"NDTV Covid-19 Data\",\n    link: \"https://edata.ndtv.com/cricket/coronavirus/data.json\"\n  }\n];\n\nconst References = () => {\n  let history = useHistory();\n\n  return (\n    <div className=\"References-container\">\n      <BreadcrumbsWrapper heading=\"References\">\n        <Breadcrumb>\n          <div className=\"Breadcrumb-link\">\n            <Link onClick={() => history.push('/')}>Home</Link>\n          </div>\n        </Breadcrumb>\n      </BreadcrumbsWrapper>\n      <div className=\"References-table\">\n        <Heading>Data Sources</Heading>\n        <Table\n          schema={schema}\n          data={data}\n          style={{\n            maxHeight: 'calc(100vh - 252px)'\n          }}\n          virtualization={false}\n          loadMore={() => null}\n          rowHeight={50}\n          headerHeight={40}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default References;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { client } from './api';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Stats from './Stats';\nimport Detail from './Detail';\nimport References from './References';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <div>\n        <Header />\n        <Router basename=\"/covid\">\n          <Switch>\n            <Route exact path=\"/\">\n              <App />\n            </Route>\n            <Route path=\"/india/detail/:id\" exact>\n              <Detail entity=\"india\" />\n            </Route>\n            <Route path=\"/world/detail/:id\" exact>\n              <Detail entity=\"world\" />\n            </Route>\n            <Route path=\"/india\">\n              <Stats entity=\"india\" />\n            </Route>\n            <Route path=\"/world\">\n              <Stats entity=\"world\" />\n            </Route>\n            <Route path=\"/references\">\n              <References />\n            </Route>\n          </Switch>\n          <Footer />\n        </Router>\n      </div>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}